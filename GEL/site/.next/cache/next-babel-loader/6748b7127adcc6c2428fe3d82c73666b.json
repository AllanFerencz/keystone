{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { getDataFromTree } from '@apollo/react-ssr';\nimport Head from 'next/head';\nimport React from 'react';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\n\nvar getApolloClient = function getApolloClient(initialState) {\n  return new ApolloClient({\n    link: new HttpLink({\n      uri: \"\".concat(process.env.KEYSTONE_URI || 'http://localhost:3000', \"/admin/api\")\n    }),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n};\n\nexport default (function (App) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(WithApollo, _React$Component);\n\n    function WithApollo(props) {\n      var _this;\n\n      _classCallCheck(this, WithApollo);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(WithApollo).call(this, props));\n      _this.apollo = props.apollo || getApolloClient();\n      return _this;\n    }\n\n    _createClass(WithApollo, [{\n      key: \"render\",\n      value: function render() {\n        return React.createElement(App, _extends({}, this.props, {\n          apollo: this.apollo\n        }));\n      }\n    }]);\n\n    return WithApollo;\n  }(React.Component), _defineProperty(_class, \"getInitialProps\",\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(appCtx) {\n      var AppTree, ctx, apollo, apolloState, getInitialProps, appProps;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              AppTree = appCtx.AppTree, ctx = appCtx.ctx;\n              apollo = getApolloClient();\n              apolloState = {};\n              getInitialProps = App.getInitialProps;\n              appProps = {\n                pageProps: {}\n              };\n\n              if (!getInitialProps) {\n                _context.next = 10;\n                break;\n              }\n\n              ctx.apolloClient = apollo;\n              _context.next = 9;\n              return getInitialProps(appCtx);\n\n            case 9:\n              appProps = _context.sent;\n\n            case 10:\n              if (!(ctx.res && (ctx.res.headersSent || ctx.res.finished))) {\n                _context.next = 12;\n                break;\n              }\n\n              return _context.abrupt(\"return\", {});\n\n            case 12:\n              if (!true) {\n                _context.next = 23;\n                break;\n              }\n\n              _context.prev = 13;\n              _context.next = 16;\n              return getDataFromTree(React.createElement(AppTree, _extends({}, appProps, {\n                apolloState: apolloState,\n                apollo: apollo\n              })));\n\n            case 16:\n              _context.next = 21;\n              break;\n\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context[\"catch\"](13); // Prevent Apollo Client GraphQL errors from crashing SSR.\n\n              if (process.env.NODE_ENV !== 'production') {\n                console.error('GraphQL error occurred [getDataFromTree]', _context.t0);\n              }\n\n            case 21:\n              if (true) {\n                // getDataFromTree does not call componentWillUnmount\n                // head side effect therefore need to be cleared manually\n                Head.rewind();\n              }\n\n              apolloState.data = apollo.cache.extract();\n\n            case 23:\n              apollo.toJSON = function () {\n                return null;\n              };\n\n              return _context.abrupt(\"return\", _objectSpread({}, appProps, {\n                apolloState: apolloState,\n                apollo: apollo\n              }));\n\n            case 25:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[13, 18]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }()), _temp;\n});","map":{"version":3,"sources":["/Users/mike/Development/GEL/website/site/lib/withApollo.js"],"names":["getApolloClient","link","uri","process","cache","initialState","React","AppTree","ctx","appCtx","apollo","apolloState","getInitialProps","App","appProps","pageProps","getDataFromTree","console","Head","props"],"mappings":"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","sourcesContent":["import { getDataFromTree } from '@apollo/react-ssr';\nimport Head from 'next/head';\nimport React from 'react';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\n\nconst getApolloClient = initialState =>\n\tnew ApolloClient({\n\t\tlink: new HttpLink({\n\t\t\turi: `${process.env.KEYSTONE_URI || 'http://localhost:3000'}/admin/api`,\n\t\t}),\n\t\tcache: new InMemoryCache().restore(initialState || {}),\n\t});\n\nexport default App => {\n\treturn class WithApollo extends React.Component {\n\t\tstatic getInitialProps = async appCtx => {\n\t\t\tconst { AppTree, ctx } = appCtx;\n\t\t\tconst apollo = getApolloClient();\n\t\t\tconst apolloState = {};\n\t\t\tconst getInitialProps = App.getInitialProps;\n\n\t\t\tlet appProps = { pageProps: {} };\n\n\t\t\tif (getInitialProps) {\n\t\t\t\tctx.apolloClient = apollo;\n\t\t\t\tappProps = await getInitialProps(appCtx);\n\t\t\t}\n\n\t\t\tif (ctx.res && (ctx.res.headersSent || ctx.res.finished)) {\n\t\t\t\treturn {};\n\t\t\t}\n\n\t\t\tif (typeof window === 'undefined') {\n\t\t\t\ttry {\n\t\t\t\t\tawait getDataFromTree(\n\t\t\t\t\t\t<AppTree {...appProps} apolloState={apolloState} apollo={apollo} />\n\t\t\t\t\t);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Prevent Apollo Client GraphQL errors from crashing SSR.\n\t\t\t\t\tif (process.env.NODE_ENV !== 'production') {\n\t\t\t\t\t\tconsole.error('GraphQL error occurred [getDataFromTree]', error);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (typeof window === 'undefined') {\n\t\t\t\t\t// getDataFromTree does not call componentWillUnmount\n\t\t\t\t\t// head side effect therefore need to be cleared manually\n\t\t\t\t\tHead.rewind();\n\t\t\t\t}\n\n\t\t\t\tapolloState.data = apollo.cache.extract();\n\t\t\t}\n\n\t\t\tapollo.toJSON = () => {\n\t\t\t\treturn null;\n\t\t\t};\n\n\t\t\treturn {\n\t\t\t\t...appProps,\n\t\t\t\tapolloState,\n\t\t\t\tapollo,\n\t\t\t};\n\t\t};\n\n\t\tconstructor(props) {\n\t\t\tsuper(props);\n\t\t\tthis.apollo = props.apollo || getApolloClient();\n\t\t}\n\n\t\trender() {\n\t\t\treturn <App {...this.props} apollo={this.apollo} />;\n\t\t}\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}