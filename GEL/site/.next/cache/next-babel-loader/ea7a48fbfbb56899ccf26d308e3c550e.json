{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { getDataFromTree } from '@apollo/react-ssr';\nimport Head from 'next/head';\nimport React from 'react';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\n\nvar getApolloClient = function getApolloClient(initialState) {\n  return new ApolloClient({\n    link: new HttpLink({\n      uri: \"\".concat(process.env.KEYSTONE_URI || 'http://localhost:3000', \"/admin/api\")\n    }),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n};\n\nexport default (function (App) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(WithApollo, _React$Component);\n\n    function WithApollo(props) {\n      var _this;\n\n      _classCallCheck(this, WithApollo);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(WithApollo).call(this, props));\n      _this.apollo = props.apollo || getApolloClient();\n      return _this;\n    }\n\n    _createClass(WithApollo, [{\n      key: \"render\",\n      value: function render() {\n        return React.createElement(App, _extends({}, this.props, {\n          apollo: this.apollo\n        }));\n      }\n    }]);\n\n    return WithApollo;\n  }(React.Component), _defineProperty(_class, \"getInitialProps\",\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(appCtx) {\n      var AppTree, ctx, apollo, apolloState, getInitialProps, appProps;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              AppTree = appCtx.AppTree, ctx = appCtx.ctx;\n              apollo = getApolloClient();\n              apolloState = {};\n              getInitialProps = App.getInitialProps;\n              appProps = {\n                pageProps: {}\n              };\n\n              if (!getInitialProps) {\n                _context.next = 10;\n                break;\n              }\n\n              ctx.apolloClient = apollo;\n              _context.next = 9;\n              return getInitialProps(appCtx);\n\n            case 9:\n              appProps = _context.sent;\n\n            case 10:\n              if (!(ctx.res && (ctx.res.headersSent || ctx.res.finished))) {\n                _context.next = 12;\n                break;\n              }\n\n              return _context.abrupt(\"return\", {});\n\n            case 12:\n              if (!false) {\n                _context.next = 23;\n                break;\n              }\n\n              _context.prev = 13;\n              _context.next = 16;\n              return getDataFromTree(React.createElement(AppTree, _extends({}, appProps, {\n                apolloState: apolloState,\n                apollo: apollo\n              })));\n\n            case 16:\n              _context.next = 21;\n              break;\n\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context[\"catch\"](13);\n\n              // Prevent Apollo Client GraphQL errors from crashing SSR.\n              if (process.env.NODE_ENV !== 'production') {\n                console.error('GraphQL error occurred [getDataFromTree]', _context.t0);\n              }\n\n            case 21:\n              if (false) {\n                // getDataFromTree does not call componentWillUnmount\n                // head side effect therefore need to be cleared manually\n                Head.rewind();\n              }\n\n              apolloState.data = apollo.cache.extract();\n\n            case 23:\n              apollo.toJSON = function () {\n                return null;\n              };\n\n              return _context.abrupt(\"return\", _objectSpread({}, appProps, {\n                apolloState: apolloState,\n                apollo: apollo\n              }));\n\n            case 25:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[13, 18]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }()), _temp;\n});","map":{"version":3,"sources":["/Users/mike/Development/GEL/website/site/lib/withApollo.js"],"names":["getDataFromTree","Head","React","ApolloClient","InMemoryCache","HttpLink","getApolloClient","initialState","link","uri","process","env","KEYSTONE_URI","cache","restore","App","props","apollo","Component","appCtx","AppTree","ctx","apolloState","getInitialProps","appProps","pageProps","apolloClient","res","headersSent","finished","NODE_ENV","console","error","rewind","data","extract","toJSON"],"mappings":"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","sourcesContent":["import { getDataFromTree } from '@apollo/react-ssr';\nimport Head from 'next/head';\nimport React from 'react';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\n\nconst getApolloClient = initialState =>\n\tnew ApolloClient({\n\t\tlink: new HttpLink({\n\t\t\turi: `${process.env.KEYSTONE_URI || 'http://localhost:3000'}/admin/api`,\n\t\t}),\n\t\tcache: new InMemoryCache().restore(initialState || {}),\n\t});\n\nexport default App => {\n\treturn class WithApollo extends React.Component {\n\t\tstatic getInitialProps = async appCtx => {\n\t\t\tconst { AppTree, ctx } = appCtx;\n\t\t\tconst apollo = getApolloClient();\n\t\t\tconst apolloState = {};\n\t\t\tconst getInitialProps = App.getInitialProps;\n\n\t\t\tlet appProps = { pageProps: {} };\n\n\t\t\tif (getInitialProps) {\n\t\t\t\tctx.apolloClient = apollo;\n\t\t\t\tappProps = await getInitialProps(appCtx);\n\t\t\t}\n\n\t\t\tif (ctx.res && (ctx.res.headersSent || ctx.res.finished)) {\n\t\t\t\treturn {};\n\t\t\t}\n\n\t\t\tif (typeof window === 'undefined') {\n\t\t\t\ttry {\n\t\t\t\t\tawait getDataFromTree(\n\t\t\t\t\t\t<AppTree {...appProps} apolloState={apolloState} apollo={apollo} />\n\t\t\t\t\t);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Prevent Apollo Client GraphQL errors from crashing SSR.\n\t\t\t\t\tif (process.env.NODE_ENV !== 'production') {\n\t\t\t\t\t\tconsole.error('GraphQL error occurred [getDataFromTree]', error);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (typeof window === 'undefined') {\n\t\t\t\t\t// getDataFromTree does not call componentWillUnmount\n\t\t\t\t\t// head side effect therefore need to be cleared manually\n\t\t\t\t\tHead.rewind();\n\t\t\t\t}\n\n\t\t\t\tapolloState.data = apollo.cache.extract();\n\t\t\t}\n\n\t\t\tapollo.toJSON = () => {\n\t\t\t\treturn null;\n\t\t\t};\n\n\t\t\treturn {\n\t\t\t\t...appProps,\n\t\t\t\tapolloState,\n\t\t\t\tapollo,\n\t\t\t};\n\t\t};\n\n\t\tconstructor(props) {\n\t\t\tsuper(props);\n\t\t\tthis.apollo = props.apollo || getApolloClient();\n\t\t}\n\n\t\trender() {\n\t\t\treturn <App {...this.props} apollo={this.apollo} />;\n\t\t}\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}